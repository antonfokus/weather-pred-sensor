import streamlit as st
import numpy as np
import sqlite3
import keras.models
from WeatherSensorAPI import WeatherSensorAPI

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
temp_model = keras.models.load_model("temp_full.keras")
weather_model = keras.models.load_model("weather_full.keras")

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–æ–≥–æ–¥—ã
weather_encoding = {"–º–æ—Ä–æ—Å—å": 0, "–¥–æ–∂–¥—å": 1, "—Å–æ–ª–Ω—Ü–µ": 2, "—Å–Ω–µ–≥": 3, "—Ç—É–º–∞–Ω": 4}
reverse_weather_encoding = {v: k for k, v in weather_encoding.items()}
weather_encoding_ru_text = ["–º–æ—Ä–æ—Å—å", "–¥–æ–∂–¥—å", "—Å–æ–ª–Ω—Ü–µ", "—Å–Ω–µ–≥", "—Ç—É–º–∞–Ω"]

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
HISTORY = 4  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–∞—Ç—á–∏–∫–∞
sensor = WeatherSensorAPI()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
if "temp_inputs" not in st.session_state:
    st.session_state["temp_inputs"] = [f"{15 + i * 2}" for i in range(HISTORY)]
if "weather_inputs" not in st.session_state:
    st.session_state["weather_inputs"] = ["—Å–æ–ª–Ω—Ü–µ"] * HISTORY

if "rerun" in st.session_state and st.session_state["rerun"]:
    st.session_state["rerun"] = False
    st.experimental_rerun()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("weather_predictions.db")
    cursor = conn.cursor()

    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("DROP TABLE IF EXISTS predictions")
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS predictions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            temp_inputs TEXT,
            weather_inputs TEXT,
            temperature_prediction TEXT,
            weather_prediction TEXT
        )
    """)
    conn.commit()
    conn.close()


def insert_prediction(temp_inputs, weather_inputs, temp_prediction, weather_prediction):
    conn = sqlite3.connect("weather_predictions.db")
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO predictions (temp_inputs, weather_inputs, temperature_prediction, weather_prediction) VALUES (?, ?, ?, ?)",
        (temp_inputs, weather_inputs, temp_prediction, weather_prediction)
    )
    conn.commit()
    conn.close()


def get_predictions():
    conn = sqlite3.connect("weather_predictions.db")
    cursor = conn.cursor()
    cursor.execute(
        "SELECT id, temp_inputs, weather_inputs, temperature_prediction, weather_prediction FROM predictions ORDER BY id DESC"
    )
    predictions = cursor.fetchall()
    conn.close()
    return predictions


def delete_prediction(prediction_id):
    conn = sqlite3.connect("weather_predictions.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM predictions WHERE id = ?", (prediction_id,))
    conn.commit()
    conn.close()


def update_inputs_from_sensor():
    """–û–±–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Å–µ–Ω—Å–æ—Ä–∞."""
    forecast = sensor.get_forecast_for_4_days()
    for i in range(HISTORY):
        st.session_state["temp_inputs"][i] = str(forecast[i]["temperature"])
        st.session_state["weather_inputs"][i] = forecast[i]["weather_type"]


def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()

    st.title('üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã')

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–∞ –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–æ–π
    st.button("–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–∞ üì°", on_click=update_inputs_from_sensor)

    # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞
    with st.form(key="main_form"):
        st.subheader('–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –±—ã–ª–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏? üìÖ')
        st.caption('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–Ω–µ–π üå°Ô∏è:')

        # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        temp_cols = st.columns(HISTORY)
        for i, col in enumerate(temp_cols):
            st.session_state["temp_inputs"][i] = col.text_input(
                f'–î–µ–Ω—å #{i + 1}',
                value=st.session_state["temp_inputs"][i],
                key=f"temp_input_{i}"
            )

        st.caption('–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø–æ–≥–æ–¥—ã üå§Ô∏è:')
        # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ –ø–æ–≥–æ–¥—ã
        weather_cols = st.columns(HISTORY)
        for i, col in enumerate(weather_cols):
            st.session_state["weather_inputs"][i] = col.selectbox(
                f'–î–µ–Ω—å #{i + 1}',
                weather_encoding_ru_text,
                index=weather_encoding_ru_text.index(st.session_state["weather_inputs"][i]),
                key=f"weather_input_{i}"
            )

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        submit_button = st.form_submit_button(label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å ‚ú®")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    if submit_button:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏
        temp_inputs_float = [float(x) for x in st.session_state["temp_inputs"]]
        temp_inputs_array = np.expand_dims(temp_inputs_float, axis=0)
        temp_result = temp_model.predict(temp_inputs_array)

        coded_weather = [weather_encoding[w] for w in st.session_state["weather_inputs"]]
        coded_weather_array = np.expand_dims(coded_weather, axis=0)
        predicted_weather_index = np.argmax(weather_model.predict(coded_weather_array))
        predicted_weather = reverse_weather_encoding[predicted_weather_index]

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        insert_prediction(
            str(st.session_state["temp_inputs"]),
            str(st.session_state["weather_inputs"]),
            f"{int(temp_result[0][0])}¬∞C",
            predicted_weather
        )

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.subheader('–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å üìÖ')
        st.write(f'üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: **{int(temp_result[0][0])}¬∞C**')
        st.write(f'üå§Ô∏è –¢–∏–ø –ø–æ–≥–æ–¥—ã: **{predicted_weather}**')

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ üìù")
    predictions = get_predictions()
    if predictions:
        for prediction_id, temp_inputs, weather_inputs, temp_prediction, weather_prediction in predictions:
            col1, col2 = st.columns([4, 1])
            with col1:
                st.write(f"**–ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:** üå°Ô∏è {temp_inputs}, üå§Ô∏è {weather_inputs}")
                st.write(f"**–ü—Ä–æ–≥–Ω–æ–∑:** üå°Ô∏è {temp_prediction}, üå§Ô∏è {weather_prediction}")
            with col2:
                if st.button("‚ùå –£–¥–∞–ª–∏—Ç—å", key=f"delete_{prediction_id}"):
                    delete_prediction(prediction_id)
                    st.session_state["rerun"] = True


if __name__ == "__main__":
    main()
