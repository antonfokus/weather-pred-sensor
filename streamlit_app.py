import streamlit as st
import numpy as np
import keras.models
from WeatherSensorAPI import WeatherSensorAPI

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
temp_model = keras.models.load_model("temp_full.keras")
weather_model = keras.models.load_model("weather_full.keras")

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–æ–≥–æ–¥—ã
weather_encoding = {"–º–æ—Ä–æ—Å—å": 0, "–¥–æ–∂–¥—å": 1, "—Å–æ–ª–Ω—Ü–µ": 2, "—Å–Ω–µ–≥": 3, "—Ç—É–º–∞–Ω": 4}
weather_encoding_ru_text = ["–º–æ—Ä–æ—Å—å", "–¥–æ–∂–¥—å", "—Å–æ–ª–Ω—Ü–µ", "—Å–Ω–µ–≥", "—Ç—É–º–∞–Ω"]
reverse_weather_encoding = {v: k for k, v in weather_encoding.items()}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
HISTORY = 4  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–∞—Ç—á–∏–∫–∞
sensor = WeatherSensorAPI()


def main():
    st.title('üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–æ—Ä–º—ã
    temp_inputs = [st.session_state.get(f"temp_input_{i}", f"{15 + i * 2}") for i in range(HISTORY)]
    weather_inputs = [st.session_state.get(f"weather_input_{i}", "—Å–æ–ª–Ω—Ü–µ") for i in range(HISTORY)]

    # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞
    with st.form(key="main_form"):
        st.subheader('–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –±—ã–ª–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏? üìÖ')
        st.caption('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–Ω–µ–π üå°Ô∏è:')

        # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        temp_cols = st.columns(HISTORY)
        for i, col in enumerate(temp_cols):
            temp_inputs[i] = col.text_input(f'–î–µ–Ω—å #{i+1}', value=temp_inputs[i], key=f"temp_input_{i}")

        st.caption('–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø–æ–≥–æ–¥—ã üå§Ô∏è:')
        # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ –ø–æ–≥–æ–¥—ã
        weather_cols = st.columns(HISTORY)
        for i, col in enumerate(weather_cols):
            weather_inputs[i] = col.selectbox(f'–î–µ–Ω—å #{i+1}', weather_encoding_ru_text, index=weather_encoding_ru_text.index(weather_inputs[i]), key=f"weather_input_{i}")

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        submit_button = st.form_submit_button(label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å ‚ú®")

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∞—Ç—á–∏–∫–∞
    if st.button("–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–∞ üì°"):
        forecast = sensor.get_forecast_for_4_days()
        for i in range(HISTORY):
            st.session_state[f"temp_input_{i}"] = str(forecast[i]["temperature"])
            st.session_state[f"weather_input_{i}"] = forecast[i]["weather_type"]

        st.experimental_rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    if submit_button:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏
        temp_inputs_float = [float(x) for x in temp_inputs]
        temp_inputs_array = np.expand_dims(temp_inputs_float, axis=0)
        temp_result = temp_model.predict(temp_inputs_array)

        coded_weather = [weather_encoding[w] for w in weather_inputs]
        coded_weather_array = np.expand_dims(coded_weather, axis=0)
        predicted_weather_index = np.argmax(weather_model.predict(coded_weather_array))
        predicted_weather = reverse_weather_encoding[predicted_weather_index]

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.subheader('–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å üìÖ')
        st.write(f'üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: **{int(temp_result[0][0])}¬∞C**')
        st.write(f'üå§Ô∏è –¢–∏–ø –ø–æ–≥–æ–¥—ã: **{predicted_weather}**')


if __name__ == "__main__":
    main()
